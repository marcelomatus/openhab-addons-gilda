/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.openhab.binding.zwave.internal.protocol;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveCommandClass.CommandClass;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Z-Wave Plus device type class. Defines the zwave plus device types and the mandatory command classes.
 *
 * @author Jorg de Jong
 */
public class ZWavePlusDeviceType {
    private static final Logger logger = LoggerFactory.getLogger(ZWavePlusDeviceType.class);

    private static Map<Integer, ZWavePlusInfo> zwavePlusDeviceTypes = new HashMap<>();

    private static void setup() {
        // @formatter:off
        List<ZWavePlusInfo> initdata = Arrays.asList(new ZWavePlusInfo(0x0000, "Unknown Type"),
            new ZWavePlusInfo(0x0100, "Central Controller", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x56, 0x22),
            new ZWavePlusInfo(0x0200, "Display Simple", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86),
            new ZWavePlusInfo(0x0300, "Door Lock Keypad", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x62, 0x63, 0x80),
            new ZWavePlusInfo(0x0400, "Fan Switch", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x26),
            new ZWavePlusInfo(0x0500, "Gateway", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x56, 0x60, 0x8E, 0x84,0x22),
            new ZWavePlusInfo(0x0600, "Light Dimmer Switch", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x26),
            new ZWavePlusInfo(0x0700, "On/Off Power Switch", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x25),
            new ZWavePlusInfo(0x0800, "Power Strip", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x60, 0x8E, 0x25),
            new ZWavePlusInfo(0x0900, "Remote Control AV", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86),
            new ZWavePlusInfo(0x0a00, "Remote Control Multi Purpose", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86,0x84),
            new ZWavePlusInfo(0x0b00, "Remote Control Simple", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x5b),
            new ZWavePlusInfo(0x0b01, "Key Fob", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x5b),
            new ZWavePlusInfo(0x0c00, "Sensor Notification", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0c01, "Smoke Alarm Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0c02, "CO Alarm Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0c03, "CO2 Alarm Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0c04, "Heat Alarm Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0c05, "Water Alarm Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0c06, "Access Control Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0c07, "Home Security Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0c08, "Power Management Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0c09, "System Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0c0a, "Emergency Alarm Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0c0b, "Clock Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0cff, "MultiDevice Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30),
            new ZWavePlusInfo(0x0d00, "Multilevel Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d01, "Air Temperature Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d02, "General Purpose Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d03, "Luminance Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d04, "Power Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d05, "Humidity Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d06, "Velocity Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d07, "Direction Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d08, "Atmospheric Pressure Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d09, "Barometric Pressure Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d0a, "Solar Radiation Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d0b, "Dew Point Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d0c, "Rain Rate Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d0d, "Tide Level Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d0e, "Weight Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d0f, "Voltage Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d10, "Current Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d11, "CO2 Level Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d12, "Air Flow Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d13, "Tank Capacity Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d14, "Distance Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d15, "Angle Postition Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d16, "Rotation Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d17, "Water Temperature Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d18, "Soil Temperature Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d19, "Seismic Intensity Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d1a, "Seismic Magnitude Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d1b, "Ultraviolet Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0d1c, "Electrical Resistivity Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0b1d, "Electrical Conductivity Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0b1e, "Loudness Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0b1f, "Moisture Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0b20, "Frequency Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0b21, "Time Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0b22, "Target Temperature Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0bff, "MultiDevice Sensor", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x30, 0x31),
            new ZWavePlusInfo(0x0e00, "Set Top Box", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x56, 0x60, 0x8e, 0x84, 0x22),
            new ZWavePlusInfo(0x0f00, "Siren", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86),
            new ZWavePlusInfo(0x1000, "Sub Energy Meter", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x56, 0x32),
            new ZWavePlusInfo(0x1100, "Sub System Controller", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x60, 0x84, 0x22),
            new ZWavePlusInfo(0x1200, "Thermostat HVAC", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x43, 0x40),
            new ZWavePlusInfo(0x1300, "Thermostat Setback", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x43),
            new ZWavePlusInfo(0x1400, "TV", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x56, 0x60, 0x8e, 0x84, 0x22),
            new ZWavePlusInfo(0x1500, "Valve open/close", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x26, 0x25),
            new ZWavePlusInfo(0x1600, "Wall Controller", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x5b),
            new ZWavePlusInfo(0x1700, "Whole Home Meter Simple", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x56, 0x32),
            new ZWavePlusInfo(0x1800, "Window Covering No Position/Endpoint", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85,0x86, 0x26, 0x25),
            new ZWavePlusInfo(0x1900, "Window Covering Endpoint Aware", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x26, 0x25),
            new ZWavePlusInfo(0x1a00, "Window Covering Position/Endpoint Aware", 0x5a, 0x5e, 0x59, 0x72, 0x73, 0x85, 0x86, 0x26, 0x25));
        // @formatter:on
        for (ZWavePlusInfo c : initdata) {
            zwavePlusDeviceTypes.put(c.getKey(), c);
        }
    }

    /**
     * Lookup the zwavePlus Device info.
     *
     * @param zwPlusDeviceType the device type
     * @return the device info if available
     */
    public static ZWavePlusInfo getZWavePlusInfo(int zwPlusDeviceType) {
        if (zwavePlusDeviceTypes.isEmpty()) {
            setup();
        }
        return zwavePlusDeviceTypes.get(zwPlusDeviceType);
    }

    /**
     * Contains the Zwave Plus Device type info.
     */
    public static class ZWavePlusInfo {
        private int key;
        private String label;
        private Set<CommandClass> mandatoryCommandClasses = new HashSet<>();

        ZWavePlusInfo(int key, String label, int... keys) {
            this.key = key;
            this.label = label;

            for (int k : keys) {
                CommandClass cls = CommandClass.getCommandClass(k);
                if (cls == null) {
                    logger.debug("Unknown command class {} for ZwavePlus Device Type {}:{}", k, key, label);
                } else {
                    mandatoryCommandClasses.add(cls);
                }
            }
        }

        public int getKey() {
            return key;
        }

        public String getLabel() {
            return label;
        }

        public Set<CommandClass> getMandatoryCommandClasses() {
            return mandatoryCommandClasses;
        }
    }

}
