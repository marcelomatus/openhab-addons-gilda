/**
 * Copyright (c) 2010-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
/**
 * This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
 * See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
 * Any modifications to this file will be lost upon recompilation of the source schema. 
 * Generated on: 2017.03.09 at 08:34:29 PM CET 
 */

package org.openhab.binding.knx.internal.parser.knxproj13;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the org.openhab.binding.knx.internal.parser.knxproj13 package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private static final QName _MaskVersionDownwardCompatibleMasks_QNAME = new QName("http://knx.org/xml/project/13", "DownwardCompatibleMasks");
    private static final QName _MaskVersionHawkConfigurationData_QNAME = new QName("http://knx.org/xml/project/13", "HawkConfigurationData");
    private static final QName _MaskVersionMaskEntries_QNAME = new QName("http://knx.org/xml/project/13", "MaskEntries");
    private static final QName _ManufacturerMasterPublicKeys_QNAME = new QName("http://knx.org/xml/project/13", "PublicKeys");
    private static final QName _InterfaceObjectProperty_QNAME = new QName("http://knx.org/xml/project/13", "Property");
    private static final QName _ConnectorsSend_QNAME = new QName("http://knx.org/xml/project/13", "Send");
    private static final QName _ConnectorsReceive_QNAME = new QName("http://knx.org/xml/project/13", "Receive");
    private static final QName _ProcedureLdCtrlCompareMem_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlCompareMem");
    private static final QName _ProcedureLdCtrlAbsSegment_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlAbsSegment");
    private static final QName _ProcedureLdCtrlLoad_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlLoad");
    private static final QName _ProcedureLdCtrlUnload_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlUnload");
    private static final QName _ProcedureLdCtrlLoadCompleted_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlLoadCompleted");
    private static final QName _ProcedureLdCtrlMapError_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlMapError");
    private static final QName _ProcedureLdCtrlClearLCFilterTable_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlClearLCFilterTable");
    private static final QName _ProcedureLdCtrlConnect_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlConnect");
    private static final QName _ProcedureLdCtrlMerge_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlMerge");
    private static final QName _ProcedureLdCtrlTaskCtrl1_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlTaskCtrl1");
    private static final QName _ProcedureLdCtrlTaskCtrl2_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlTaskCtrl2");
    private static final QName _ProcedureLdCtrlSetControlVariable_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlSetControlVariable");
    private static final QName _ProcedureLdCtrlDisconnect_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlDisconnect");
    private static final QName _ProcedureLdCtrlRestart_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlRestart");
    private static final QName _ProcedureLdCtrlDelay_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlDelay");
    private static final QName _ProcedureLdCtrlLoadImageMem_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlLoadImageMem");
    private static final QName _ProcedureLdCtrlWriteMem_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlWriteMem");
    private static final QName _ProcedureLdCtrlTaskSegment_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlTaskSegment");
    private static final QName _ProcedureLdCtrlWriteProp_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlWriteProp");
    private static final QName _ProcedureLdCtrlMasterReset_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlMasterReset");
    private static final QName _ProcedureLdCtrlTaskPtr_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlTaskPtr");
    private static final QName _ProcedureLdCtrlRelSegment_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlRelSegment");
    private static final QName _ProcedureLdCtrlLoadImageProp_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlLoadImageProp");
    private static final QName _ProcedureLdCtrlCompareProp_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlCompareProp");
    private static final QName _ProcedureLdCtrlWriteRelMem_QNAME = new QName("http://knx.org/xml/project/13", "LdCtrlWriteRelMem");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: org.openhab.binding.knx.internal.parser.knxproj13
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Procedure }
     * 
     */
    public Procedure createProcedure() {
        return new Procedure();
    }

    /**
     * Create an instance of {@link Line }
     * 
     */
    public Line createLine() {
        return new Line();
    }

    /**
     * Create an instance of {@link KNX }
     * 
     */
    public KNX createKNX() {
        return new KNX();
    }

    /**
     * Create an instance of {@link Project }
     * 
     */
    public Project createProject() {
        return new Project();
    }

    /**
     * Create an instance of {@link ManufacturerData }
     * 
     */
    public ManufacturerData createManufacturerData() {
        return new ManufacturerData();
    }

    /**
     * Create an instance of {@link MasterData }
     * 
     */
    public MasterData createMasterData() {
        return new MasterData();
    }

    /**
     * Create an instance of {@link InterfaceObjects }
     * 
     */
    public InterfaceObjects createInterfaceObjects() {
        return new InterfaceObjects();
    }

    /**
     * Create an instance of {@link LdCtrlUnload }
     * 
     */
    public LdCtrlUnload createLdCtrlUnload() {
        return new LdCtrlUnload();
    }

    /**
     * Create an instance of {@link GroupAddressReference }
     * 
     */
    public GroupAddressReference createGroupAddressReference() {
        return new GroupAddressReference();
    }

    /**
     * Create an instance of {@link UserFiles }
     * 
     */
    public UserFiles createUserFiles() {
        return new UserFiles();
    }

    /**
     * Create an instance of {@link LdCtrlAbsSegment }
     * 
     */
    public LdCtrlAbsSegment createLdCtrlAbsSegment() {
        return new LdCtrlAbsSegment();
    }

    /**
     * Create an instance of {@link Product }
     * 
     */
    public Product createProduct() {
        return new Product();
    }

    /**
     * Create an instance of {@link Procedures }
     * 
     */
    public Procedures createProcedures() {
        return new Procedures();
    }

    /**
     * Create an instance of {@link Languages }
     * 
     */
    public Languages createLanguages() {
        return new Languages();
    }

    /**
     * Create an instance of {@link org.openhab.binding.knx.internal.parser.knxproj13.String }
     * 
     */
    public org.openhab.binding.knx.internal.parser.knxproj13.String createString() {
        return new org.openhab.binding.knx.internal.parser.knxproj13.String();
    }

    /**
     * Create an instance of {@link Security }
     * 
     */
    public Security createSecurity() {
        return new Security();
    }

    /**
     * Create an instance of {@link Feature }
     * 
     */
    public Feature createFeature() {
        return new Feature();
    }

    /**
     * Create an instance of {@link MediumTypes }
     * 
     */
    public MediumTypes createMediumTypes() {
        return new MediumTypes();
    }

    /**
     * Create an instance of {@link AccessRights }
     * 
     */
    public AccessRights createAccessRights() {
        return new AccessRights();
    }

    /**
     * Create an instance of {@link LdCtrlMerge }
     * 
     */
    public LdCtrlMerge createLdCtrlMerge() {
        return new LdCtrlMerge();
    }

    /**
     * Create an instance of {@link InterfaceObject }
     * 
     */
    public InterfaceObject createInterfaceObject() {
        return new InterfaceObject();
    }

    /**
     * Create an instance of {@link DeviceCompare }
     * 
     */
    public DeviceCompare createDeviceCompare() {
        return new DeviceCompare();
    }

    /**
     * Create an instance of {@link org.openhab.binding.knx.internal.parser.knxproj13.LdCtrlClearLCFilterTable }
     * 
     */
    public org.openhab.binding.knx.internal.parser.knxproj13.LdCtrlClearLCFilterTable createLdCtrlClearLCFilterTable() {
        return new org.openhab.binding.knx.internal.parser.knxproj13.LdCtrlClearLCFilterTable();
    }

    /**
     * Create an instance of {@link GroupAddress }
     * 
     */
    public GroupAddress createGroupAddress() {
        return new GroupAddress();
    }

    /**
     * Create an instance of {@link UnassignedDevices }
     * 
     */
    public UnassignedDevices createUnassignedDevices() {
        return new UnassignedDevices();
    }

    /**
     * Create an instance of {@link GroupAddresses }
     * 
     */
    public GroupAddresses createGroupAddresses() {
        return new GroupAddresses();
    }

    /**
     * Create an instance of {@link LdCtrlLoadImageMem }
     * 
     */
    public LdCtrlLoadImageMem createLdCtrlLoadImageMem() {
        return new LdCtrlLoadImageMem();
    }

    /**
     * Create an instance of {@link Translation }
     * 
     */
    public Translation createTranslation() {
        return new Translation();
    }

    /**
     * Create an instance of {@link InterfaceObjectProperty }
     * 
     */
    public InterfaceObjectProperty createInterfaceObjectProperty() {
        return new InterfaceObjectProperty();
    }

    /**
     * Create an instance of {@link Parameters }
     * 
     */
    public Parameters createParameters() {
        return new Parameters();
    }

    /**
     * Create an instance of {@link MediumType }
     * 
     */
    public MediumType createMediumType() {
        return new MediumType();
    }

    /**
     * Create an instance of {@link MaskEntry }
     * 
     */
    public MaskEntry createMaskEntry() {
        return new MaskEntry();
    }

    /**
     * Create an instance of {@link ComObjectInstanceRefs }
     * 
     */
    public ComObjectInstanceRefs createComObjectInstanceRefs() {
        return new ComObjectInstanceRefs();
    }

    /**
     * Create an instance of {@link Code }
     * 
     */
    public Code createCode() {
        return new Code();
    }

    /**
     * Create an instance of {@link MaskEntries }
     * 
     */
    public MaskEntries createMaskEntries() {
        return new MaskEntries();
    }

    /**
     * Create an instance of {@link RSAKeyValue }
     * 
     */
    public RSAKeyValue createRSAKeyValue() {
        return new RSAKeyValue();
    }

    /**
     * Create an instance of {@link Float }
     * 
     */
    public Float createFloat() {
        return new Float();
    }

    /**
     * Create an instance of {@link Hardware2Program }
     * 
     */
    public Hardware2Program createHardware2Program() {
        return new Hardware2Program();
    }

    /**
     * Create an instance of {@link BinaryData }
     * 
     */
    public BinaryData createBinaryData() {
        return new BinaryData();
    }

    /**
     * Create an instance of {@link Resources }
     * 
     */
    public Resources createResources() {
        return new Resources();
    }

    /**
     * Create an instance of {@link UnsignedInteger }
     * 
     */
    public UnsignedInteger createUnsignedInteger() {
        return new UnsignedInteger();
    }

    /**
     * Create an instance of {@link LdCtrlWriteMem }
     * 
     */
    public LdCtrlWriteMem createLdCtrlWriteMem() {
        return new LdCtrlWriteMem();
    }

    /**
     * Create an instance of {@link Hardware2Programs }
     * 
     */
    public Hardware2Programs createHardware2Programs() {
        return new Hardware2Programs();
    }

    /**
     * Create an instance of {@link RegistrationInfo }
     * 
     */
    public RegistrationInfo createRegistrationInfo() {
        return new RegistrationInfo();
    }

    /**
     * Create an instance of {@link Attribute }
     * 
     */
    public Attribute createAttribute() {
        return new Attribute();
    }

    /**
     * Create an instance of {@link ParameterTypes }
     * 
     */
    public ParameterTypes createParameterTypes() {
        return new ParameterTypes();
    }

    /**
     * Create an instance of {@link LdCtrlCompareMem }
     * 
     */
    public LdCtrlCompareMem createLdCtrlCompareMem() {
        return new LdCtrlCompareMem();
    }

    /**
     * Create an instance of {@link PublicKeys }
     * 
     */
    public PublicKeys createPublicKeys() {
        return new PublicKeys();
    }

    /**
     * Create an instance of {@link ImgLocation }
     * 
     */
    public ImgLocation createImgLocation() {
        return new ImgLocation();
    }

    /**
     * Create an instance of {@link ManufacturerMaster }
     * 
     */
    public ManufacturerMaster createManufacturerMaster() {
        return new ManufacturerMaster();
    }

    /**
     * Create an instance of {@link Property }
     * 
     */
    public Property createProperty() {
        return new Property();
    }

    /**
     * Create an instance of {@link Installation }
     * 
     */
    public Installation createInstallation() {
        return new Installation();
    }

    /**
     * Create an instance of {@link Enumeration }
     * 
     */
    public Enumeration createEnumeration() {
        return new Enumeration();
    }

    /**
     * Create an instance of {@link Trades }
     * 
     */
    public Trades createTrades() {
        return new Trades();
    }

    /**
     * Create an instance of {@link LdCtrlDelay }
     * 
     */
    public LdCtrlDelay createLdCtrlDelay() {
        return new LdCtrlDelay();
    }

    /**
     * Create an instance of {@link Manufacturers }
     * 
     */
    public Manufacturers createManufacturers() {
        return new Manufacturers();
    }

    /**
     * Create an instance of {@link LdCtrlSetControlVariable }
     * 
     */
    public LdCtrlSetControlVariable createLdCtrlSetControlVariable() {
        return new LdCtrlSetControlVariable();
    }

    /**
     * Create an instance of {@link ParameterRefs }
     * 
     */
    public ParameterRefs createParameterRefs() {
        return new ParameterRefs();
    }

    /**
     * Create an instance of {@link ResourceType }
     * 
     */
    public ResourceType createResourceType() {
        return new ResourceType();
    }

    /**
     * Create an instance of {@link DownwardCompatibleMasks }
     * 
     */
    public DownwardCompatibleMasks createDownwardCompatibleMasks() {
        return new DownwardCompatibleMasks();
    }

    /**
     * Create an instance of {@link FunctionalBlocks }
     * 
     */
    public FunctionalBlocks createFunctionalBlocks() {
        return new FunctionalBlocks();
    }

    /**
     * Create an instance of {@link Connectors }
     * 
     */
    public Connectors createConnectors() {
        return new Connectors();
    }

    /**
     * Create an instance of {@link ProductLanguages }
     * 
     */
    public ProductLanguages createProductLanguages() {
        return new ProductLanguages();
    }

    /**
     * Create an instance of {@link LdCtrlLoadImageProp }
     * 
     */
    public LdCtrlLoadImageProp createLdCtrlLoadImageProp() {
        return new LdCtrlLoadImageProp();
    }

    /**
     * Create an instance of {@link ComObjectRefs }
     * 
     */
    public ComObjectRefs createComObjectRefs() {
        return new ComObjectRefs();
    }

    /**
     * Create an instance of {@link Parameter }
     * 
     */
    public Parameter createParameter() {
        return new Parameter();
    }

    /**
     * Create an instance of {@link ApplicationProgramRef }
     * 
     */
    public ApplicationProgramRef createApplicationProgramRef() {
        return new ApplicationProgramRef();
    }

    /**
     * Create an instance of {@link Products }
     * 
     */
    public Products createProducts() {
        return new Products();
    }

    /**
     * Create an instance of {@link Installations }
     * 
     */
    public Installations createInstallations() {
        return new Installations();
    }

    /**
     * Create an instance of {@link ChannelInstances }
     * 
     */
    public ChannelInstances createChannelInstances() {
        return new ChannelInstances();
    }

    /**
     * Create an instance of {@link DatapointTypes }
     * 
     */
    public DatapointTypes createDatapointTypes() {
        return new DatapointTypes();
    }

    /**
     * Create an instance of {@link EnumValue }
     * 
     */
    public EnumValue createEnumValue() {
        return new EnumValue();
    }

    /**
     * Create an instance of {@link Attributes }
     * 
     */
    public Attributes createAttributes() {
        return new Attributes();
    }

    /**
     * Create an instance of {@link DeviceInstance }
     * 
     */
    public DeviceInstance createDeviceInstance() {
        return new DeviceInstance();
    }

    /**
     * Create an instance of {@link ComObjectTable }
     * 
     */
    public ComObjectTable createComObjectTable() {
        return new ComObjectTable();
    }

    /**
     * Create an instance of {@link MaskVersion }
     * 
     */
    public MaskVersion createMaskVersion() {
        return new MaskVersion();
    }

    /**
     * Create an instance of {@link RefType }
     * 
     */
    public RefType createRefType() {
        return new RefType();
    }

    /**
     * Create an instance of {@link ApplicationProgram }
     * 
     */
    public ApplicationProgram createApplicationProgram() {
        return new ApplicationProgram();
    }

    /**
     * Create an instance of {@link Manufacturer }
     * 
     */
    public Manufacturer createManufacturer() {
        return new Manufacturer();
    }

    /**
     * Create an instance of {@link GroupRange }
     * 
     */
    public GroupRange createGroupRange() {
        return new GroupRange();
    }

    /**
     * Create an instance of {@link LdCtrlMapError }
     * 
     */
    public LdCtrlMapError createLdCtrlMapError() {
        return new LdCtrlMapError();
    }

    /**
     * Create an instance of {@link ComObjectInstanceRef }
     * 
     */
    public ComObjectInstanceRef createComObjectInstanceRef() {
        return new ComObjectInstanceRef();
    }

    /**
     * Create an instance of {@link ParameterInstanceRefs }
     * 
     */
    public ParameterInstanceRefs createParameterInstanceRefs() {
        return new ParameterInstanceRefs();
    }

    /**
     * Create an instance of {@link PublicKey }
     * 
     */
    public PublicKey createPublicKey() {
        return new PublicKey();
    }

    /**
     * Create an instance of {@link Resource }
     * 
     */
    public Resource createResource() {
        return new Resource();
    }

    /**
     * Create an instance of {@link Topology }
     * 
     */
    public Topology createTopology() {
        return new Topology();
    }

    /**
     * Create an instance of {@link ApplicationPrograms }
     * 
     */
    public ApplicationPrograms createApplicationPrograms() {
        return new ApplicationPrograms();
    }

    /**
     * Create an instance of {@link LdCtrlTaskCtrl2 }
     * 
     */
    public LdCtrlTaskCtrl2 createLdCtrlTaskCtrl2() {
        return new LdCtrlTaskCtrl2();
    }

    /**
     * Create an instance of {@link LdCtrlTaskCtrl1 }
     * 
     */
    public LdCtrlTaskCtrl1 createLdCtrlTaskCtrl1() {
        return new LdCtrlTaskCtrl1();
    }

    /**
     * Create an instance of {@link MemorySegment }
     * 
     */
    public MemorySegment createMemorySegment() {
        return new MemorySegment();
    }

    /**
     * Create an instance of {@link SignedInteger }
     * 
     */
    public SignedInteger createSignedInteger() {
        return new SignedInteger();
    }

    /**
     * Create an instance of {@link Area }
     * 
     */
    public Area createArea() {
        return new Area();
    }

    /**
     * Create an instance of {@link AddressTable }
     * 
     */
    public AddressTable createAddressTable() {
        return new AddressTable();
    }

    /**
     * Create an instance of {@link LdCtrlWriteRelMem }
     * 
     */
    public LdCtrlWriteRelMem createLdCtrlWriteRelMem() {
        return new LdCtrlWriteRelMem();
    }

    /**
     * Create an instance of {@link DatapointType }
     * 
     */
    public DatapointType createDatapointType() {
        return new DatapointType();
    }

    /**
     * Create an instance of {@link LdCtrlCompareProp }
     * 
     */
    public LdCtrlCompareProp createLdCtrlCompareProp() {
        return new LdCtrlCompareProp();
    }

    /**
     * Create an instance of {@link LdCtrlRelSegment }
     * 
     */
    public LdCtrlRelSegment createLdCtrlRelSegment() {
        return new LdCtrlRelSegment();
    }

    /**
     * Create an instance of {@link TranslationElement }
     * 
     */
    public TranslationElement createTranslationElement() {
        return new TranslationElement();
    }

    /**
     * Create an instance of {@link Static }
     * 
     */
    public Static createStatic() {
        return new Static();
    }

    /**
     * Create an instance of {@link DownwardCompatibleMask }
     * 
     */
    public DownwardCompatibleMask createDownwardCompatibleMask() {
        return new DownwardCompatibleMask();
    }

    /**
     * Create an instance of {@link Reserved }
     * 
     */
    public Reserved createReserved() {
        return new Reserved();
    }

    /**
     * Create an instance of {@link LdCtrlLoad }
     * 
     */
    public LdCtrlLoad createLdCtrlLoad() {
        return new LdCtrlLoad();
    }

    /**
     * Create an instance of {@link Options }
     * 
     */
    public Options createOptions() {
        return new Options();
    }

    /**
     * Create an instance of {@link Dynamic }
     * 
     */
    public Dynamic createDynamic() {
        return new Dynamic();
    }

    /**
     * Create an instance of {@link InterfaceObjectType }
     * 
     */
    public InterfaceObjectType createInterfaceObjectType() {
        return new InterfaceObjectType();
    }

    /**
     * Create an instance of {@link InterfaceObjectProperties }
     * 
     */
    public InterfaceObjectProperties createInterfaceObjectProperties() {
        return new InterfaceObjectProperties();
    }

    /**
     * Create an instance of {@link PropertyDataType }
     * 
     */
    public PropertyDataType createPropertyDataType() {
        return new PropertyDataType();
    }

    /**
     * Create an instance of {@link ProjectInformation }
     * 
     */
    public ProjectInformation createProjectInformation() {
        return new ProjectInformation();
    }

    /**
     * Create an instance of {@link FunctionalBlock }
     * 
     */
    public FunctionalBlock createFunctionalBlock() {
        return new FunctionalBlock();
    }

    /**
     * Create an instance of {@link TranslationUnit }
     * 
     */
    public TranslationUnit createTranslationUnit() {
        return new TranslationUnit();
    }

    /**
     * Create an instance of {@link LoadProcedures }
     * 
     */
    public LoadProcedures createLoadProcedures() {
        return new LoadProcedures();
    }

    /**
     * Create an instance of {@link Format }
     * 
     */
    public Format createFormat() {
        return new Format();
    }

    /**
     * Create an instance of {@link Language }
     * 
     */
    public Language createLanguage() {
        return new Language();
    }

    /**
     * Create an instance of {@link Hardware }
     * 
     */
    public Hardware createHardware() {
        return new Hardware();
    }

    /**
     * Create an instance of {@link Features }
     * 
     */
    public Features createFeatures() {
        return new Features();
    }

    /**
     * Create an instance of {@link HistoryEntries }
     * 
     */
    public HistoryEntries createHistoryEntries() {
        return new HistoryEntries();
    }

    /**
     * Create an instance of {@link ParameterCalculations }
     * 
     */
    public ParameterCalculations createParameterCalculations() {
        return new ParameterCalculations();
    }

    /**
     * Create an instance of {@link HawkConfigurationData }
     * 
     */
    public HawkConfigurationData createHawkConfigurationData() {
        return new HawkConfigurationData();
    }

    /**
     * Create an instance of {@link LdCtrlLoadCompleted }
     * 
     */
    public LdCtrlLoadCompleted createLdCtrlLoadCompleted() {
        return new LdCtrlLoadCompleted();
    }

    /**
     * Create an instance of {@link Buildings }
     * 
     */
    public Buildings createBuildings() {
        return new Buildings();
    }

    /**
     * Create an instance of {@link ComObjectRef }
     * 
     */
    public ComObjectRef createComObjectRef() {
        return new ComObjectRef();
    }

    /**
     * Create an instance of {@link MemorySegments }
     * 
     */
    public MemorySegments createMemorySegments() {
        return new MemorySegments();
    }

    /**
     * Create an instance of {@link Bit }
     * 
     */
    public Bit createBit() {
        return new Bit();
    }

    /**
     * Create an instance of {@link Extension }
     * 
     */
    public Extension createExtension() {
        return new Extension();
    }

    /**
     * Create an instance of {@link PropertyDataTypes }
     * 
     */
    public PropertyDataTypes createPropertyDataTypes() {
        return new PropertyDataTypes();
    }

    /**
     * Create an instance of {@link MaskVersions }
     * 
     */
    public MaskVersions createMaskVersions() {
        return new MaskVersions();
    }

    /**
     * Create an instance of {@link DatapointSubtype }
     * 
     */
    public DatapointSubtype createDatapointSubtype() {
        return new DatapointSubtype();
    }

    /**
     * Create an instance of {@link ComObject }
     * 
     */
    public ComObject createComObject() {
        return new ComObject();
    }

    /**
     * Create an instance of {@link InterfaceObjectTypes }
     * 
     */
    public InterfaceObjectTypes createInterfaceObjectTypes() {
        return new InterfaceObjectTypes();
    }

    /**
     * Create an instance of {@link LdCtrlTaskPtr }
     * 
     */
    public LdCtrlTaskPtr createLdCtrlTaskPtr() {
        return new LdCtrlTaskPtr();
    }

    /**
     * Create an instance of {@link GroupRanges }
     * 
     */
    public GroupRanges createGroupRanges() {
        return new GroupRanges();
    }

    /**
     * Create an instance of {@link FixupList }
     * 
     */
    public FixupList createFixupList() {
        return new FixupList();
    }

    /**
     * Create an instance of {@link DatapointSubtypes }
     * 
     */
    public DatapointSubtypes createDatapointSubtypes() {
        return new DatapointSubtypes();
    }

    /**
     * Create an instance of {@link LdCtrlTaskSegment }
     * 
     */
    public LdCtrlTaskSegment createLdCtrlTaskSegment() {
        return new LdCtrlTaskSegment();
    }

    /**
     * Create an instance of {@link AssociationTable }
     * 
     */
    public AssociationTable createAssociationTable() {
        return new AssociationTable();
    }

    /**
     * Create an instance of {@link LdCtrlMasterReset }
     * 
     */
    public LdCtrlMasterReset createLdCtrlMasterReset() {
        return new LdCtrlMasterReset();
    }

    /**
     * Create an instance of {@link Location }
     * 
     */
    public Location createLocation() {
        return new Location();
    }

    /**
     * Create an instance of {@link LdCtrlWriteProp }
     * 
     */
    public LdCtrlWriteProp createLdCtrlWriteProp() {
        return new LdCtrlWriteProp();
    }

    /**
     * Create an instance of {@link Procedure.LdCtrlClearLCFilterTable }
     * 
     */
    public Procedure.LdCtrlClearLCFilterTable createProcedureLdCtrlClearLCFilterTable() {
        return new Procedure.LdCtrlClearLCFilterTable();
    }

    /**
     * Create an instance of {@link Line.AdditionalGroupAddresses }
     * 
     */
    public Line.AdditionalGroupAddresses createLineAdditionalGroupAddresses() {
        return new Line.AdditionalGroupAddresses();
    }

    /**
     * Create an instance of {@link Line.BusAccess }
     * 
     */
    public Line.BusAccess createLineBusAccess() {
        return new Line.BusAccess();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DownwardCompatibleMasks }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "DownwardCompatibleMasks", scope = MaskVersion.class)
    public JAXBElement<DownwardCompatibleMasks> createMaskVersionDownwardCompatibleMasks(DownwardCompatibleMasks value) {
        return new JAXBElement<DownwardCompatibleMasks>(_MaskVersionDownwardCompatibleMasks_QNAME, DownwardCompatibleMasks.class, MaskVersion.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link HawkConfigurationData }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "HawkConfigurationData", scope = MaskVersion.class)
    public JAXBElement<HawkConfigurationData> createMaskVersionHawkConfigurationData(HawkConfigurationData value) {
        return new JAXBElement<HawkConfigurationData>(_MaskVersionHawkConfigurationData_QNAME, HawkConfigurationData.class, MaskVersion.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link MaskEntries }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "MaskEntries", scope = MaskVersion.class)
    public JAXBElement<MaskEntries> createMaskVersionMaskEntries(MaskEntries value) {
        return new JAXBElement<MaskEntries>(_MaskVersionMaskEntries_QNAME, MaskEntries.class, MaskVersion.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PublicKeys }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "PublicKeys", scope = ManufacturerMaster.class)
    public JAXBElement<PublicKeys> createManufacturerMasterPublicKeys(PublicKeys value) {
        return new JAXBElement<PublicKeys>(_ManufacturerMasterPublicKeys_QNAME, PublicKeys.class, ManufacturerMaster.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Property }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "Property", scope = InterfaceObject.class)
    public JAXBElement<Property> createInterfaceObjectProperty(Property value) {
        return new JAXBElement<Property>(_InterfaceObjectProperty_QNAME, Property.class, InterfaceObject.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link GroupAddressReference }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "Send", scope = Connectors.class)
    public JAXBElement<GroupAddressReference> createConnectorsSend(GroupAddressReference value) {
        return new JAXBElement<GroupAddressReference>(_ConnectorsSend_QNAME, GroupAddressReference.class, Connectors.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link GroupAddressReference }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "Receive", scope = Connectors.class)
    public JAXBElement<GroupAddressReference> createConnectorsReceive(GroupAddressReference value) {
        return new JAXBElement<GroupAddressReference>(_ConnectorsReceive_QNAME, GroupAddressReference.class, Connectors.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlCompareMem }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlCompareMem", scope = Procedure.class)
    public JAXBElement<LdCtrlCompareMem> createProcedureLdCtrlCompareMem(LdCtrlCompareMem value) {
        return new JAXBElement<LdCtrlCompareMem>(_ProcedureLdCtrlCompareMem_QNAME, LdCtrlCompareMem.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlAbsSegment }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlAbsSegment", scope = Procedure.class)
    public JAXBElement<LdCtrlAbsSegment> createProcedureLdCtrlAbsSegment(LdCtrlAbsSegment value) {
        return new JAXBElement<LdCtrlAbsSegment>(_ProcedureLdCtrlAbsSegment_QNAME, LdCtrlAbsSegment.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlLoad }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlLoad", scope = Procedure.class)
    public JAXBElement<LdCtrlLoad> createProcedureLdCtrlLoad(LdCtrlLoad value) {
        return new JAXBElement<LdCtrlLoad>(_ProcedureLdCtrlLoad_QNAME, LdCtrlLoad.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlUnload }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlUnload", scope = Procedure.class)
    public JAXBElement<LdCtrlUnload> createProcedureLdCtrlUnload(LdCtrlUnload value) {
        return new JAXBElement<LdCtrlUnload>(_ProcedureLdCtrlUnload_QNAME, LdCtrlUnload.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlLoadCompleted }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlLoadCompleted", scope = Procedure.class)
    public JAXBElement<LdCtrlLoadCompleted> createProcedureLdCtrlLoadCompleted(LdCtrlLoadCompleted value) {
        return new JAXBElement<LdCtrlLoadCompleted>(_ProcedureLdCtrlLoadCompleted_QNAME, LdCtrlLoadCompleted.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlMapError }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlMapError", scope = Procedure.class)
    public JAXBElement<LdCtrlMapError> createProcedureLdCtrlMapError(LdCtrlMapError value) {
        return new JAXBElement<LdCtrlMapError>(_ProcedureLdCtrlMapError_QNAME, LdCtrlMapError.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Procedure.LdCtrlClearLCFilterTable }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlClearLCFilterTable", scope = Procedure.class)
    public JAXBElement<Procedure.LdCtrlClearLCFilterTable> createProcedureLdCtrlClearLCFilterTable(Procedure.LdCtrlClearLCFilterTable value) {
        return new JAXBElement<Procedure.LdCtrlClearLCFilterTable>(_ProcedureLdCtrlClearLCFilterTable_QNAME, Procedure.LdCtrlClearLCFilterTable.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlConnect", scope = Procedure.class)
    public JAXBElement<java.lang.String> createProcedureLdCtrlConnect(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_ProcedureLdCtrlConnect_QNAME, java.lang.String.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlMerge }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlMerge", scope = Procedure.class)
    public JAXBElement<LdCtrlMerge> createProcedureLdCtrlMerge(LdCtrlMerge value) {
        return new JAXBElement<LdCtrlMerge>(_ProcedureLdCtrlMerge_QNAME, LdCtrlMerge.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlTaskCtrl1 }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlTaskCtrl1", scope = Procedure.class)
    public JAXBElement<LdCtrlTaskCtrl1> createProcedureLdCtrlTaskCtrl1(LdCtrlTaskCtrl1 value) {
        return new JAXBElement<LdCtrlTaskCtrl1>(_ProcedureLdCtrlTaskCtrl1_QNAME, LdCtrlTaskCtrl1 .class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlTaskCtrl2 }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlTaskCtrl2", scope = Procedure.class)
    public JAXBElement<LdCtrlTaskCtrl2> createProcedureLdCtrlTaskCtrl2(LdCtrlTaskCtrl2 value) {
        return new JAXBElement<LdCtrlTaskCtrl2>(_ProcedureLdCtrlTaskCtrl2_QNAME, LdCtrlTaskCtrl2 .class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlSetControlVariable }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlSetControlVariable", scope = Procedure.class)
    public JAXBElement<LdCtrlSetControlVariable> createProcedureLdCtrlSetControlVariable(LdCtrlSetControlVariable value) {
        return new JAXBElement<LdCtrlSetControlVariable>(_ProcedureLdCtrlSetControlVariable_QNAME, LdCtrlSetControlVariable.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlDisconnect", scope = Procedure.class)
    public JAXBElement<java.lang.String> createProcedureLdCtrlDisconnect(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_ProcedureLdCtrlDisconnect_QNAME, java.lang.String.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlRestart", scope = Procedure.class)
    public JAXBElement<java.lang.String> createProcedureLdCtrlRestart(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_ProcedureLdCtrlRestart_QNAME, java.lang.String.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlDelay }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlDelay", scope = Procedure.class)
    public JAXBElement<LdCtrlDelay> createProcedureLdCtrlDelay(LdCtrlDelay value) {
        return new JAXBElement<LdCtrlDelay>(_ProcedureLdCtrlDelay_QNAME, LdCtrlDelay.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlLoadImageMem }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlLoadImageMem", scope = Procedure.class)
    public JAXBElement<LdCtrlLoadImageMem> createProcedureLdCtrlLoadImageMem(LdCtrlLoadImageMem value) {
        return new JAXBElement<LdCtrlLoadImageMem>(_ProcedureLdCtrlLoadImageMem_QNAME, LdCtrlLoadImageMem.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlWriteMem }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlWriteMem", scope = Procedure.class)
    public JAXBElement<LdCtrlWriteMem> createProcedureLdCtrlWriteMem(LdCtrlWriteMem value) {
        return new JAXBElement<LdCtrlWriteMem>(_ProcedureLdCtrlWriteMem_QNAME, LdCtrlWriteMem.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlTaskSegment }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlTaskSegment", scope = Procedure.class)
    public JAXBElement<LdCtrlTaskSegment> createProcedureLdCtrlTaskSegment(LdCtrlTaskSegment value) {
        return new JAXBElement<LdCtrlTaskSegment>(_ProcedureLdCtrlTaskSegment_QNAME, LdCtrlTaskSegment.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlWriteProp }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlWriteProp", scope = Procedure.class)
    public JAXBElement<LdCtrlWriteProp> createProcedureLdCtrlWriteProp(LdCtrlWriteProp value) {
        return new JAXBElement<LdCtrlWriteProp>(_ProcedureLdCtrlWriteProp_QNAME, LdCtrlWriteProp.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlMasterReset }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlMasterReset", scope = Procedure.class)
    public JAXBElement<LdCtrlMasterReset> createProcedureLdCtrlMasterReset(LdCtrlMasterReset value) {
        return new JAXBElement<LdCtrlMasterReset>(_ProcedureLdCtrlMasterReset_QNAME, LdCtrlMasterReset.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlTaskPtr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlTaskPtr", scope = Procedure.class)
    public JAXBElement<LdCtrlTaskPtr> createProcedureLdCtrlTaskPtr(LdCtrlTaskPtr value) {
        return new JAXBElement<LdCtrlTaskPtr>(_ProcedureLdCtrlTaskPtr_QNAME, LdCtrlTaskPtr.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlRelSegment }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlRelSegment", scope = Procedure.class)
    public JAXBElement<LdCtrlRelSegment> createProcedureLdCtrlRelSegment(LdCtrlRelSegment value) {
        return new JAXBElement<LdCtrlRelSegment>(_ProcedureLdCtrlRelSegment_QNAME, LdCtrlRelSegment.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlLoadImageProp }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlLoadImageProp", scope = Procedure.class)
    public JAXBElement<LdCtrlLoadImageProp> createProcedureLdCtrlLoadImageProp(LdCtrlLoadImageProp value) {
        return new JAXBElement<LdCtrlLoadImageProp>(_ProcedureLdCtrlLoadImageProp_QNAME, LdCtrlLoadImageProp.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlCompareProp }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlCompareProp", scope = Procedure.class)
    public JAXBElement<LdCtrlCompareProp> createProcedureLdCtrlCompareProp(LdCtrlCompareProp value) {
        return new JAXBElement<LdCtrlCompareProp>(_ProcedureLdCtrlCompareProp_QNAME, LdCtrlCompareProp.class, Procedure.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LdCtrlWriteRelMem }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://knx.org/xml/project/13", name = "LdCtrlWriteRelMem", scope = Procedure.class)
    public JAXBElement<LdCtrlWriteRelMem> createProcedureLdCtrlWriteRelMem(LdCtrlWriteRelMem value) {
        return new JAXBElement<LdCtrlWriteRelMem>(_ProcedureLdCtrlWriteRelMem_QNAME, LdCtrlWriteRelMem.class, Procedure.class, value);
    }

}
