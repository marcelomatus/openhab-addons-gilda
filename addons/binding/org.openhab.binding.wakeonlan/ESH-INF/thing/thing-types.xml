<?xml version="1.0" encoding="UTF-8"?>
<!-- 
/**
 * Copyright (c) 2010-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
 -->
<thing:thing-descriptions bindingId="wakeonlan" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:thing="http://eclipse.org/smarthome/schemas/thing-description/v1.0.0"
	xsi:schemaLocation="http://eclipse.org/smarthome/schemas/thing-description/v1.0.0 http://eclipse.org/smarthome/schemas/thing-description-1.0.0.xsd">

	<!-- WOL Device -->
	<thing-type id="wol-device">
		<label>Wol Device</label>
		<description><![CDATA[
		An IPv4 enabled device that suports waking up by a magic packet on LAN.
		If your target device runs windows and you usually put it to sleep, 
		you need to enable wake on lan from target network adapter properties page.
		If your target device is a PC, you need to enable WOL in BIOS settings.
		Raspberry Pis do not support WOL when powered off, instead keep them running on dynamic freq scaling to save power.
		In addition to class wide logging, it is also done seprately per Thing, 
		to enable logs of specific thing, use karaf console command: <b>log:set debug "Thing Label"</b> 
		]]>
        </description>

		<channels>
			<channel id="wakeup" typeId="wakeup-channel" />
			<channel id="status" typeId="status-channel" />
		</channels>

		<config-description>
		    <parameter name="targetMAC" type="text" required="true" pattern="([0-9a-fA-F]{2}[: -]?){5}[0-9a-fA-F]{2}">
                <label>Target MAC Address</label>
                <description><![CDATA[Target device's ethernet MAC address. 
                Do NOT use wifi adapter's MAC.<br/>
                MAC address may be in one of the following hex formats:<br/> 
                <b>b8:27:eb:d0:e6:12</b><br/>
                <b>b8-27-eb-d0-e6-12</b><br/>
                <b>b8 27 eb d0 e6 12</b><br/>
                <b>b827ebd0e612</b><br/><br/>
                Upper or lower case doesn't matter.
                ]]>
                </description>
            </parameter>
			<parameter name="targetIP" type="text" required="false" pattern="([0-9]{1,3}[.]){3}[0-9]{1,3}">
			    <!-- <context>network-address</context>-->
				<label>Target IPv4 Subnet Broadcast Address</label>
				<description><![CDATA[Target IPv4 BROADCAST IP to send wol UDP packet to. 
				It could be limited broadcast address, 
				subnet directed broadcast address, subnet base address or host's unicast IP address.
				If you do not specify an address, then address 255.255.255.255 (limited broadcast) is used. 
				It works when openhab and target device is on same physical network (subnet).<br/>
				If they are on different subnets, you need directed subnet broadcast address.
				An IP router is a device that connects two subnets. 
				You need to make sure your routers allow forwarding directed broadcast packets. <br/>
			    <b>How to calculate subnet directed broadcast address?</b><br/>
                If your target host usually gets IP addresses in the range 192.168.1.X and subnet mask is 255.255.255.0 
                then you need to specify 192.168.1.255 here.
                Formula is: <br/>
                <b>TargetHostIP BITWISE_OR (BITWISE_NOT(TargetSubnetMask))</b><br/>
                On linux, the command /sbin/ifconfig reports subnet directed broadcast address.
                For detailed information look here :<br/> 
                https://www.countryipblocks.net/identifying-the-network-and-broadcast-address-of-a-subnet<br/>
                Sometimes, using target subnet's base address also works. 
                It is obtained by bitwise AND of target machine's unicast IP address and subnet mask.
                In above examples, target subnet's base addresses would be 192.168.1.0 and 10.1.0.0.
                If nothing works, try giving target host's IP address itself.
                ]]>
                </description>
                <default>255.255.255.255</default>
			</parameter>
			<parameter name="targetUDPPort" type="integer" required="false" min="1" max="65535">
			    <context></context>
                <label>Target UDP Port</label>
                <description><![CDATA[WOL target UDP port. 
                Typically it is 9 (discard) or 7 (echo). Default 9.
                ]]>
                </description>
                <default>9</default>
            </parameter>
            <parameter name="sendOnAllInterfaces" type="boolean" required="false">
                <label>Send On All N/W Interfaces</label>
                <description><![CDATA[Should the binding send WOL UDP packet on all physical n/w interfaces of opehab2 server?
                If disabled, the OS routing table decides which interface to use for a given destination IP address.  
                ]]>
                </description>
                <default>false</default>
            </parameter>
            <parameter name="sendOnInterface" type="text" required="false">
                <label>Send On Specific N/W Interface</label>
                <description><![CDATA[Should the binding send WOL UDP packet on specific physical n/w interface of opehab2 server?
                If left empty, the OS routing table decides which interface to use for a given destination IP address.
                Specify interface's name e.g eth0, eth1, wlan0.
                Note that if your openhab2 server is only connected to network via wireless lan, the wifi router may or may not
                forward the WOL broadcast packet to target machine connected via wired ethernet port. 
                If it does not forward, you have to connect openhab2 server as well to wired ethernet port.
                ]]>
                </description>
            </parameter>
            <parameter name="setSO_BROADCAST" type="boolean" required="false">
                <label>Set SO_BROADCAST option on socket</label>
                <description><![CDATA[Set SO_BROADCAST OS level socket option.
                    SO_BROADCAST allows OS to catch unwanted broadcast messages arising from buggy aplication software.
                    When application writer explicitely sets SO_BROADCAST, the intention becomes clear to OS and 
                    it allows sending packet to subnet base address or subnet broadcast address.
                    Some operating systems may require that the Java virtual machine be started with 
                    implementation specific privileges to enable this option or send broadcast datagrams.
                    If you get java.io.IOException: Permission denied, first try enabling this option, 
                    if that doesn't work try disabling this option and change <b>Target Address</b> to target host's unicast IP.
                ]]>
                </description>
                <default>true</default>
            </parameter>            
		</config-description>
	</thing-type>

	<channel-type id="wakeup-channel">
		<item-type>Switch</item-type>
		<label>Wakeup</label>
		<description>Send WOL magic packet</description>
		<category>PowerOutlet</category>
		<state readOnly="false"/>
	</channel-type>
	<channel-type id="status-channel">
        <item-type>String</item-type>
        <label>Status</label>
        <description>Status Info</description>
        <state readOnly="true" pattern="%s"/>
    </channel-type>

</thing:thing-descriptions>

